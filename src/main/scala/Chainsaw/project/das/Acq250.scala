package Chainsaw.project.das

import Chainsaw.edaFlow.Device.{AlteraDevice, CycloneV}
import Chainsaw.edaFlow.boards.PcieIntel
import Chainsaw.edaFlow.{Device, _}
import Chainsaw.xillybus.XillybusWrapper
import spinal.core._
import spinal.lib.slave

import java.io.File

class Acq250 extends Component with Board {

  val clk, rstn         = in Bool ()
  val adc_clk, data_clk = in Bool () // clk signals generated by AD9959
  lazy val pcie         = slave(PcieIntel(4))
  lazy val ddsBundle    = out(Ad9959Bundle())
  lazy val pulseBundle  = out(PulseBundle())
  lazy val gain         = out UInt (6 bits)

  override val xdcFile: File                 = new File("boards/das/createAcq250.tcl")
  override val device: Device.ChainsawDevice = new AlteraDevice(CycloneV, "5CGXFC9D6F27I7", 125 MHz, None)

  override val defaultClockDomain: ClockDomain = ClockDomain(
    clock = clk,
    reset = rstn,
    config = ClockDomainConfig(
      clockEdge        = RISING,
      resetKind        = ASYNC,
      resetActiveLevel = LOW
    )
  )

  val dataClockDomain: ClockDomain = ClockDomain(
    clock = data_clk,
    reset = rstn,
    config = ClockDomainConfig(
      clockEdge        = RISING,
      resetKind        = ASYNC,
      resetActiveLevel = LOW
    )
  )

  val xillybus = XillybusWrapper.defaultWrapper(4, device)
  xillybus.pcieIntel <> pcie
  val pcieClockDomain = xillybus.pcieClockDomain

  val upload_32   = xillybus.getStreamToHost("read_32")
  val download_32 = xillybus.getStreamFromHost("write_32")
  val upload_8    = xillybus.getStreamToHost("read_8")
  val download_8  = xillybus.getStreamFromHost("write_8")
  val mem_32      = xillybus.memBus
}
